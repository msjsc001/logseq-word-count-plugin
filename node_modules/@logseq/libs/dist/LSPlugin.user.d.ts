import { PluginLogger } from './helpers';
import { LSPluginCaller } from './LSPlugin.caller';
import * as callableAPIs from './callable.apis';
import { IAppProxy, IDBProxy, IEditorProxy, ILSPluginUser, LSPluginBaseInfo, LSPluginUserEvents, StyleString, Theme, UIOptions, UIContainerAttrs, SettingSchemaDesc, IUserOffHook, IGitProxy, IUIProxy, UserProxyTags, IAssetsProxy } from './LSPlugin';
import * as CSS from 'csstype';
import EventEmitter from 'eventemitter3';
import { LSPluginFileStorage } from './modules/LSPlugin.Storage';
import { LSPluginExperiments } from './modules/LSPlugin.Experiments';
import { LSPluginRequest } from './modules/LSPlugin.Request';
declare global {
    interface Window {
        __LSP__HOST__: boolean;
        logseq: LSPluginUser;
    }
}
declare type callableMethods = keyof typeof callableAPIs | string;
/**
 * User plugin instance from global namespace `logseq`.
 * @example
 * ```ts
 * logseq.UI.showMsg('Hello, Logseq')
 * ```
 * @public
 */
export declare class LSPluginUser extends EventEmitter<LSPluginUserEvents> implements ILSPluginUser {
    private _baseInfo;
    private _caller;
    private _version;
    private _debugTag;
    private _settingsSchema?;
    private _connected;
    /**
     * ui frame identities
     * @private
     */
    private _ui;
    private _mFileStorage;
    private _mRequest;
    private _mExperiments;
    /**
     * handler of before unload plugin
     * @private
     */
    private _beforeunloadCallback?;
    /**
     * @param _baseInfo
     * @param _caller
     */
    constructor(_baseInfo: LSPluginBaseInfo, _caller: LSPluginCaller);
    ready(model?: any, callback?: any): Promise<void>;
    ensureConnected(): void;
    beforeunload(callback: (e: any) => Promise<void>): void;
    provideModel(model: Record<string, any>): this;
    provideTheme(theme: Theme): this;
    provideStyle(style: StyleString): this;
    provideUI(ui: UIOptions): this;
    useSettingsSchema(schema: Array<SettingSchemaDesc>): this;
    updateSettings(attrs: Record<string, any>): void;
    onSettingsChanged<T = any>(cb: (a: T, b: T) => void): IUserOffHook;
    showSettingsUI(): void;
    hideSettingsUI(): void;
    setMainUIAttrs(attrs: Partial<UIContainerAttrs>): void;
    setMainUIInlineStyle(style: CSS.Properties): void;
    hideMainUI(opts?: {
        restoreEditingCursor: boolean;
    }): void;
    showMainUI(opts?: {
        autoFocus: boolean;
    }): void;
    toggleMainUI(): void;
    get version(): string;
    get isMainUIVisible(): boolean;
    get connected(): boolean;
    get baseInfo(): LSPluginBaseInfo;
    get effect(): Boolean;
    get logger(): PluginLogger;
    get settings(): {
        [key: string]: any;
        disabled: boolean;
    };
    get caller(): LSPluginCaller;
    resolveResourceFullUrl(filePath: string): string;
    /**
     * @internal
     */
    _makeUserProxy(target: any, tag?: UserProxyTags): any;
    _execCallableAPIAsync(method: callableMethods, ...args: any[]): Promise<any>;
    _execCallableAPI(method: callableMethods, ...args: any[]): void;
    _callWin(...args: any[]): Promise<any>;
    /**
     * The interface methods of {@link IAppProxy}
     */
    get App(): IAppProxy;
    get Editor(): IEditorProxy;
    get DB(): IDBProxy;
    get Git(): IGitProxy;
    get UI(): IUIProxy;
    get Assets(): IAssetsProxy;
    get FileStorage(): LSPluginFileStorage;
    get Request(): LSPluginRequest;
    get Experiments(): LSPluginExperiments;
}
export * from './LSPlugin';
/**
 * @internal
 */
export declare function setupPluginUserInstance(pluginBaseInfo: LSPluginBaseInfo, pluginCaller: LSPluginCaller): LSPluginUser;
