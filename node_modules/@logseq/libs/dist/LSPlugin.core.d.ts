import EventEmitter from 'eventemitter3';
import { deferred, PluginLogger } from './helpers';
import * as pluginHelpers from './helpers';
import { LSPluginCaller } from './LSPlugin.caller';
import { ILSPluginThemeManager, LegacyTheme, SettingSchemaDesc, Theme, ThemeMode } from './LSPlugin';
declare global {
    interface Window {
        LSPluginCore: LSPluginCore;
    }
}
declare type DeferredActor = ReturnType<typeof deferred>;
interface LSPluginCoreOptions {
    dotConfigRoot: string;
}
/**
 * User settings
 */
declare class PluginSettings extends EventEmitter<'change' | 'reset'> {
    private readonly _userPluginSettings;
    private _schema?;
    private _settings;
    constructor(_userPluginSettings: any, _schema?: SettingSchemaDesc[]);
    get<T = any>(k: string): T;
    set(k: string | Record<string, any>, v?: any): void;
    set settings(value: Record<string, any>);
    get settings(): Record<string, any>;
    setSchema(schema: SettingSchemaDesc[], syncSettings?: boolean): void;
    reset(): void;
    toJSON(): Record<string, any>;
}
interface UserPreferences {
    theme: LegacyTheme;
    themes: {
        mode: ThemeMode;
        light: Theme;
        dark: Theme;
    };
    externals: string[];
}
interface PluginLocalOptions {
    key?: string;
    entry: string;
    url: string;
    name: string;
    version: string;
    mode: 'shadow' | 'iframe';
    settingsSchema?: SettingSchemaDesc[];
    settings?: PluginSettings;
    effect?: boolean;
    theme?: boolean;
    [key: string]: any;
}
interface PluginLocalSDKMetadata {
    version: string;
    [key: string]: any;
}
declare type PluginLocalUrl = Pick<PluginLocalOptions, 'url'> & {
    [key: string]: any;
};
declare type RegisterPluginOpts = PluginLocalOptions | PluginLocalUrl;
declare type PluginLocalIdentity = string;
declare enum PluginLocalLoadStatus {
    LOADING = "loading",
    UNLOADING = "unloading",
    LOADED = "loaded",
    UNLOADED = "unload",
    ERROR = "error"
}
/**
 * Host plugin for local
 */
declare class PluginLocal extends EventEmitter<'loaded' | 'unloaded' | 'beforeunload' | 'error' | string> {
    private _options;
    private readonly _themeMgr;
    private readonly _ctx;
    private _sdk;
    private _disposes;
    private _id;
    private _status;
    private _loadErr?;
    private _localRoot?;
    private _dotSettingsFile?;
    private _caller?;
    private _logger?;
    /**
     * @param _options
     * @param _themeMgr
     * @param _ctx
     */
    constructor(_options: PluginLocalOptions, _themeMgr: ILSPluginThemeManager, _ctx: LSPluginCore);
    _setupUserSettings(reload?: boolean): Promise<() => void>;
    getMainUIContainer(): HTMLElement | undefined;
    _resolveResourceFullUrl(filePath: string, localRoot?: string): string;
    _preparePackageConfigs(): Promise<() => Promise<void>>;
    _tryToNormalizeEntry(): Promise<void>;
    _loadConfigThemes(themes: Theme[]): Promise<void>;
    _loadLayoutsData(): Promise<Record<string, any>>;
    _saveLayoutsData(data: any): Promise<void>;
    _persistMainUILayoutData(e: {
        width: number;
        height: number;
        left: number;
        top: number;
    }): Promise<void>;
    _setupDraggableContainer(el: HTMLElement, opts?: Partial<{
        key: string;
        title: string;
        close: () => void;
    }>): () => void;
    _setupResizableContainer(el: HTMLElement, key?: string): () => void;
    load(opts?: Partial<{
        indicator: DeferredActor;
        reload: boolean;
    }>): Promise<void>;
    reload(): Promise<void>;
    /**
     * @param unregister If true delete plugin files
     */
    unload(unregister?: boolean): Promise<void>;
    private dispose;
    _dispose(fn: any): void;
    _onHostMounted(callback: () => void): void;
    get layoutCore(): any;
    get isInstalledInDotRoot(): boolean;
    get loaded(): boolean;
    get pending(): boolean;
    get status(): PluginLocalLoadStatus;
    get settings(): PluginSettings;
    set settingsSchema(schema: SettingSchemaDesc[]);
    get settingsSchema(): SettingSchemaDesc[];
    get logger(): PluginLogger;
    get disabled(): any;
    get theme(): boolean;
    get caller(): LSPluginCaller;
    get id(): string;
    get shadow(): boolean;
    get options(): PluginLocalOptions;
    get themeMgr(): ILSPluginThemeManager;
    get debugTag(): string;
    get localRoot(): string;
    get loadErr(): Error | undefined;
    get dotConfigRoot(): string;
    get dotSettingsFile(): string | undefined;
    get dotPluginsRoot(): string;
    get sdk(): Partial<PluginLocalSDKMetadata>;
    set sdk(value: Partial<PluginLocalSDKMetadata>);
    toJSON(): any;
}
/**
 * Host plugin core
 */
declare class LSPluginCore extends EventEmitter<'beforeenable' | 'enabled' | 'beforedisable' | 'disabled' | 'registered' | 'error' | 'unregistered' | 'ready' | 'themes-changed' | 'theme-selected' | 'reset-custom-theme' | 'settings-changed' | 'unlink-plugin' | 'beforereload' | 'reloaded'> implements ILSPluginThemeManager {
    private readonly _options;
    private _isRegistering;
    private _readyIndicator?;
    private readonly _hostMountedActor;
    private readonly _userPreferences;
    private readonly _registeredThemes;
    private readonly _registeredPlugins;
    private _currentTheme;
    /**
     * @param _options
     */
    constructor(_options: Partial<LSPluginCoreOptions>);
    loadUserPreferences(): Promise<void>;
    saveUserPreferences(settings: Partial<UserPreferences>): Promise<void>;
    /**
     * Activate the user preferences.
     *
     * Steps:
     *
     * 1. Load the custom theme.
     *
     * @memberof LSPluginCore
     */
    activateUserPreferences(): Promise<void>;
    /**
     * @param plugins
     * @param initial
     */
    register(plugins: RegisterPluginOpts[] | RegisterPluginOpts, initial?: boolean): Promise<void>;
    reload(plugins: PluginLocalIdentity[] | PluginLocalIdentity): Promise<void>;
    unregister(plugins: PluginLocalIdentity[] | PluginLocalIdentity): Promise<void>;
    enable(plugin: PluginLocalIdentity): Promise<void>;
    disable(plugin: PluginLocalIdentity): Promise<void>;
    _hook(ns: string, type: string, payload?: any, pid?: string): Promise<void>;
    hookApp(type: string, payload?: any, pid?: string): Promise<void>;
    hookEditor(type: string, payload?: any, pid?: string): Promise<void>;
    hookDb(type: string, payload?: any, pid?: string): Promise<void>;
    ensurePlugin(plugin: PluginLocalIdentity | PluginLocal): PluginLocal;
    hostMounted(): void;
    _forceCleanInjectedUI(id: string): void;
    get registeredPlugins(): Map<PluginLocalIdentity, PluginLocal>;
    get options(): Partial<LSPluginCoreOptions>;
    get readyIndicator(): DeferredActor | undefined;
    get hostMountedActor(): DeferredActor;
    get isRegistering(): boolean;
    get themes(): Map<string, Theme[]>;
    get enabledPlugins(): Map<any, any>;
    registerTheme(id: PluginLocalIdentity, opt: Theme): Promise<void>;
    selectTheme(theme: Theme | LegacyTheme, options?: {
        effect?: boolean;
        emit?: boolean;
    }): Promise<void>;
    unregisterTheme(id: PluginLocalIdentity, effect?: boolean): Promise<void>;
}
declare function setupPluginCore(options: any): void;
export { PluginLocal, pluginHelpers, setupPluginCore };
