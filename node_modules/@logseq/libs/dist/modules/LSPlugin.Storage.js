/**
 * A storage based on local files under specific context
 */
class LSPluginFileStorage {
    ctx;
    opts;
    /**
     * @param ctx
     * @param opts
     */
    constructor(ctx, opts) {
        this.ctx = ctx;
        this.opts = opts;
    }
    /**
     * plugin id
     */
    get ctxId() {
        return this.ctx.baseInfo.id;
    }
    /**
     * @param key A string as file name that support nested directory
     * @param value Storage value
     */
    setItem(key, value) {
        return this.ctx.caller.callAsync(`api:call`, {
            method: 'write-plugin-storage-file',
            args: [this.ctxId, key, value, this.opts?.assets],
        });
    }
    /**
     * @param key
     */
    getItem(key) {
        return this.ctx.caller.callAsync(`api:call`, {
            method: 'read-plugin-storage-file',
            args: [this.ctxId, key, this.opts?.assets],
        });
    }
    /**
     * @param key
     */
    removeItem(key) {
        return this.ctx.caller.call(`api:call`, {
            method: 'unlink-plugin-storage-file',
            args: [this.ctxId, key, this.opts?.assets],
        });
    }
    /**
     * Get all path file keys
     */
    allKeys() {
        return this.ctx.caller.callAsync(`api:call`, {
            method: 'list-plugin-storage-files',
            args: [this.ctxId, this.opts?.assets]
        });
    }
    /**
     * Clears the storage
     */
    clear() {
        return this.ctx.caller.call(`api:call`, {
            method: 'clear-plugin-storage-files',
            args: [this.ctxId, this.opts?.assets],
        });
    }
    /**
     * @param key
     */
    hasItem(key) {
        return this.ctx.caller.callAsync(`api:call`, {
            method: 'exist-plugin-storage-file',
            args: [this.ctxId, key, this.opts?.assets],
        });
    }
}
export { LSPluginFileStorage };
