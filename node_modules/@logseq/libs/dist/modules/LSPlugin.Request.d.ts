import { LSPluginUser, WithOptional } from '../LSPlugin.user';
import { EventEmitter } from 'eventemitter3';
export declare type IRequestOptions<R = any> = {
    url: string;
    abortable: boolean;
    headers: Record<string, string>;
    method: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';
    data: Object | ArrayBuffer;
    timeout: number;
    returnType: 'json' | 'text' | 'base64' | 'arraybuffer';
    success: (result: R) => void;
    fail: (err: any) => void;
    final: () => void;
};
export declare type RequestTaskID = string | number;
/**
 * Request task
 */
export declare class LSPluginRequestTask<R = any> {
    private _client;
    private _requestId;
    private _requestOptions;
    private readonly _promise;
    private _aborted;
    constructor(_client: LSPluginRequest, _requestId: RequestTaskID, _requestOptions?: Partial<IRequestOptions>);
    abort(): void;
    get promise(): Promise<R>;
    get client(): LSPluginRequest;
    get requestId(): RequestTaskID;
}
/**
 * A simple request client
 */
export declare class LSPluginRequest extends EventEmitter {
    private _ctx;
    constructor(_ctx: LSPluginUser);
    static createRequestTask(client: LSPluginRequest, requestID: RequestTaskID, requestOptions: Partial<IRequestOptions>): LSPluginRequestTask<any>;
    _request<R extends {}, T extends WithOptional<IRequestOptions<R>, keyof Omit<IRequestOptions, 'url'>>>(options: T): Promise<T extends Pick<IRequestOptions, 'abortable'> ? LSPluginRequestTask<R> : R>;
    get ctx(): LSPluginUser;
}
