import { LSPluginUser } from '../LSPlugin.user';
export interface IAsyncStorage {
    getItem(key: string): Promise<string | undefined>;
    setItem(key: string, value: string): Promise<void>;
    removeItem(key: string): Promise<void>;
    hasItem(key: string): Promise<boolean>;
    allKeys(): Promise<Array<string>>;
    clear(): Promise<void>;
}
/**
 * A storage based on local files under specific context
 */
declare class LSPluginFileStorage implements IAsyncStorage {
    private ctx;
    private opts?;
    /**
     * @param ctx
     * @param opts
     */
    constructor(ctx: LSPluginUser, opts?: {
        assets: boolean;
    });
    /**
     * plugin id
     */
    get ctxId(): string;
    /**
     * @param key A string as file name that support nested directory
     * @param value Storage value
     */
    setItem(key: string, value: string | any): Promise<void>;
    /**
     * @param key
     */
    getItem(key: string): Promise<string | any>;
    /**
     * @param key
     */
    removeItem(key: string): Promise<void>;
    /**
     * Get all path file keys
     */
    allKeys(): Promise<Array<string>>;
    /**
     * Clears the storage
     */
    clear(): Promise<void>;
    /**
     * @param key
     */
    hasItem(key: string): Promise<boolean>;
}
export { LSPluginFileStorage };
