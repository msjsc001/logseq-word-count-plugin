import { EventEmitter } from 'eventemitter3';
const CLIENT_MSG_CALLBACK = '#lsp#request#callback';
const genTaskCallbackType = (id) => `task_callback_${id}`;
/**
 * Request task
 */
export class LSPluginRequestTask {
    _client;
    _requestId;
    _requestOptions;
    _promise;
    _aborted = false;
    constructor(_client, _requestId, _requestOptions = {}) {
        this._client = _client;
        this._requestId = _requestId;
        this._requestOptions = _requestOptions;
        this._promise = new Promise((resolve, reject) => {
            if (!this._requestId) {
                return reject(null);
            }
            // task result listener
            this._client.once(genTaskCallbackType(this._requestId), (e) => {
                if (e && e instanceof Error) {
                    reject(e);
                }
                else {
                    resolve(e);
                }
            });
        });
        const { success, fail, final } = this._requestOptions;
        this._promise
            .then((res) => {
            success?.(res);
        })
            .catch((e) => {
            fail?.(e);
        })
            .finally(() => {
            final?.();
        });
    }
    abort() {
        if (!this._requestOptions.abortable ||
            this._aborted)
            return;
        this._client.ctx._execCallableAPI('http_request_abort', this._requestId);
        this._aborted = true;
    }
    get promise() {
        return this._promise;
    }
    get client() {
        return this._client;
    }
    get requestId() {
        return this._requestId;
    }
}
/**
 * A simple request client
 */
export class LSPluginRequest extends EventEmitter {
    _ctx;
    constructor(_ctx) {
        super();
        this._ctx = _ctx;
        // request callback listener
        this.ctx.caller.on(CLIENT_MSG_CALLBACK, (e) => {
            const reqId = e?.requestId;
            if (!reqId)
                return;
            this.emit(genTaskCallbackType(reqId), e?.payload);
        });
    }
    static createRequestTask(client, requestID, requestOptions) {
        return new LSPluginRequestTask(client, requestID, requestOptions);
    }
    async _request(options) {
        const pid = this.ctx.baseInfo.id;
        const { success, fail, final, ...requestOptions } = options;
        const reqID = this.ctx.Experiments.invokeExperMethod('request', pid, requestOptions);
        const task = LSPluginRequest.createRequestTask(this.ctx.Request, reqID, options);
        if (!requestOptions.abortable) {
            return task.promise;
        }
        return task;
    }
    get ctx() {
        return this._ctx;
    }
}
