# ==================================
# Dependencies / 第三方依赖
# ==================================
# 这些是项目运行所需的库文件，可以通过包管理器（如npm或yarn）重新安装，无需纳入版本控制。
node_modules/

# ==================================
# Build output / 构建产物
# ==================================
# 这些是源代码编译或打包后生成的文件，每次构建都会重新生成，不应提交。
dist/
build/
release/ # 打包生成的临时文件夹
*.zip    # 打包生成的压缩文件

# ==================================
# Logs / 日志文件
# ==================================
# 日志文件通常包含调试信息或运行时记录，只在本地开发环境中有用。
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# ==================================
# Environment variables / 环境变量
# ==================================
# 这些文件通常包含敏感信息（如API密钥）或特定于环境的配置，不应公开。
# 通常会保留一个 .env.example 文件作为配置示例，这个不应忽略。
.env*
!.env.example

# ==================================
# Editor directories and files / 编辑器配置
# ==================================
# 不同开发者的编辑器配置可能不同，这些文件应由个人管理，不纳入项目版本控制。
.vscode/
.idea/
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# ==================================
# OS generated files / 操作系统生成文件
# ==================================
# 操作系统（如macOS的.DS_Store，Windows的Thumbs.db）自动生成的文件，与项目代码无关。
.DS_Store
Thumbs.db

# ==================================
# Optional local config files / 可选的本地配置文件
# ==================================
# 一些工具或框架可能使用 .local 后缀的文件存储本地特定配置。
*.local

# ==================================
# Logseq specific (Optional) / Logseq 特定（可选）
# ==================================
# 如果有 Logseq 运行时产生的特定缓存或临时文件，也可以在这里添加。
# 例如（如果存在的话）:
# .logseq/bak/
# logseq/cache/

# ==================================
# Project Specific / 项目特定文件
# ==================================
# 项目相关的文档或其他不需要版本控制的文件
logseq-api文档/